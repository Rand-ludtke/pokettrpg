name: Release macOS build (unsigned)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_macos:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Install Git LFS
        run: brew install git-lfs && git lfs install

      - name: Pull LFS files
        run: git lfs pull

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build app (Vite + TS)
        run: npm run build

      - name: Ensure 512x512 app icon for mac
        run: |
          set -e
          mkdir -p build
          # If we only have ICO, convert to PNG 512 using sips (will scale up if smaller)
          if [ -f build/icon.png ]; then
            echo "icon.png present"
          elif [ -f build/icon.ico ]; then
            # extract first frame via sips (mac has sips; ico may not be readable, so fallback to a generated square)
            echo "ICO present; generating PNG"
            /usr/bin/sips -s format png build/icon.ico --out build/icon.png || /usr/bin/sips -s format png /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/ToolbarAdvanced.icns --out build/icon.png
          else
            # generate a placeholder if neither exists
            echo "No icon found; generating placeholder"
            /usr/bin/sips -s format png /System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/ToolbarAdvanced.icns --out build/icon.png
          fi
          # Resize to 512x512 minimum
          /usr/bin/sips -Z 512 build/icon.png

      - name: Build macOS artifacts (unsigned)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder -c electron-builder.yml -m --publish always

      - name: Publish GitHub Release (ensure not draft)
        if: always()
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"
          gh release edit "$TAG" --draft=false --prerelease=false --title "$TAG"

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mac-dist
          path: app/release/**
          if-no-files-found: ignore
